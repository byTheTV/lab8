/*

./gradlew runClient
./gradlew runServer
./gradlew runClient -Phost="localhost" -Pport="55555"

 */

plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.vaadin' version '24.4.9'
}

allprojects {
    group = 'org.example'
    version = '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'application'

    sourceCompatibility = '17'
    targetCompatibility = '17'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
    }
}

dependencies {
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation 'com.vaadin:vaadin-spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:24.4.9"
    }
}

vaadin {
    productionMode = false
}

// Конфигурация для клиента
application {
    mainClass = 'Client.Client'  // Главный класс для запуска клиента
}

sourceSets {
    main {
        java {
            srcDirs = ['src']  // Указываем, где исходный код
        }
        resources {
            srcDirs = ['resourses']  // Указываем, где ресурсы
        }
    }
}

// Настройка для запуска клиента с аргументами командной строки
task runClient(type: JavaExec) {
    group = "application"
    description = "Запуск клиентского приложения"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'Client.Client'
    standardInput = System.in
    if (project.hasProperty('host')) {
        args = [project.property('host')]
    }
    if (project.hasProperty('port')) {
        args += [project.property('port')]
    }
}

// Настройка для запуска сервера
task runServer(type: JavaExec) {
    group = "application"
    description = "Запуск серверного приложения"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'Server.Server'
}

// Настройка для запуска GUI
task runGui(type: JavaExec) {
    group = "application"
    description = "Запуск GUI приложения"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'GUI.GuiApplication'
    dependsOn vaadinPrepareFrontend
}

// Настройка для создания JAR клиента
task clientJar(type: Jar) {
    group = "build"
    description = "Создание JAR файла для клиента"
    archiveClassifier = 'client'
    manifest {
        attributes 'Main-Class': 'Client.Client'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

// Настройка для создания JAR сервера
task serverJar(type: Jar) {
    group = "build"
    description = "Создание JAR файла для сервера"
    archiveClassifier = 'server'
    manifest {
        attributes 'Main-Class': 'Server.Server'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

// Настройка для создания JAR GUI
task guiJar(type: Jar) {
    group = "build"
    description = "Создание JAR файла для GUI"
    archiveClassifier = 'gui'
    manifest {
        attributes 'Main-Class': 'GUI.GuiApplication'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    dependsOn vaadinPrepareFrontend
}

// Создание всех JAR файлов
task buildAllJars {
    group = "build"
    description = "Создание JAR файлов для клиента, сервера и GUI"
    dependsOn clientJar, serverJar, guiJar
}

// Настройка зависимостей для компиляции
tasks.named('compileJava') {
    dependsOn vaadinPrepareFrontend
}